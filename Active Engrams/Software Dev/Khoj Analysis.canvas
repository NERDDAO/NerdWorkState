{
	"nodes":[
		{"id":"fa1032fabed97f42","type":"group","x":3404,"y":-938,"width":1490,"height":1264,"label":"Khoj Stack"},
		{"id":"Study Questions/Study Questions.md","type":"file","file":"Proofs of Knowledge/Study Questions/Study Questions.md","x":1000,"y":0,"width":500,"height":500},
		{"id":"Engrams/Engrams.md","type":"file","file":"Proofs of Knowledge/Engrams/Engrams.md","x":1000,"y":600,"width":500,"height":500},
		{"chat_role":"assistant","id":"4e26285d76eb758e","type":"text","text":"NerdBrain's Khoj platform uses a modern web technology stack to provide end-users with a robust search interface. The key architectural features relevant to web design are as follows:\n\n1. User Interface (Front-End): Khoj leverages HTML, JavaScript, and CSS to build a user-friendly web-based interface. The application serves different HTML pages for interacting with the system such as the chat interface (`khojInterfaceWebChatHTML.html`) for conversational interaction and the main search page (`khojInterfaceWebIndexHTML.html`).\n\n2. Backend (Server-Side Logic): The backend is written in Python and uses the FastAPI framework. It includes several Python scripts like `khojMainPy`, `khojRoutersHelpersPy`, and `khojProcessorInterfaceFastAPIPy`. These scripts manage operations like request routing, server initialization, handling chat and search requests, and providing error messages.\n\n3. API Integration: Khoj also interacts with third-party services such as OpenAI via APIs. It fetches information from Github, external databases, or from its chat model depending on user requests.\n\n4. Content Rendering: Khoj uses JavaScript functions to render different types of content. This includes rendering of images, org files, markdown files, and HTML content which is handled by functions like `render_image`, `render_org`, `render_markdown`, and `render_html`.\n\n5. User Input Handling: Khoj system handles user inputs such as search queries and inputs to the chat interface in an asynchronous manner, to provide real-time responses.\n\n6. Responsive Design: The platform uses CSS to adapt to different screen sizes, making it responsive and mobile-friendly. \n\n7. State Management: Server-side state management is handled effectively in the system using state variables that are updated with user interactions and changes accordingly. \n\n8. Security: HTML sanitization is done when rendering HTML content to strip out potentially malicious scripts providing secure user experience.\n  \n9. Logging: Extensive logging is done in the system to keep track of server state, application errors, and other related data. These logs aid in debugging and monitoring system performance.\n\nOverall, Khoj's system architecture prioritizes user experience, real-time communication, security, and maintainability.","x":3418,"y":1780,"width":822,"height":1260,"color":"6"},
		{"id":"4c368eb418ef47f8","type":"text","text":"Describe the arquitecture of the khoj platform in the context of the web design for the nerdbrain","x":3300,"y":1340,"width":336,"height":196},
		{"id":"c8357a9326af2f57","type":"text","text":"Describe the arquitecture of the khoj platform as a template for AI agents","x":3610,"y":654,"width":336,"height":196},
		{"id":"d34277d0e31d4c3a","type":"text","text":"THe engram creation interface is already solved. i'm looking to create a tool for users to ask questions which use the engrams as a reference","x":1600,"y":3317,"width":250,"height":60},
		{"chat_role":"assistant","id":"6558330b3ab34086","type":"text","text":"Ah, I see. In that case, you're primarily looking for a user interface that provides an intuitive and seamless way for users to query the engrams. An \"Ask\" interface could take the form of a search bar but could be enhanced through the addition of certain elements:\n\n1. **Search Bar/Query Field**: At its core, there should be a clear and prominent search bar or query field. This could be a simple text box accompanied by a button to initiate the search or \"ask\".\n\n2. **Auto-suggestions/Predictive Search**: As the user types their questions, the interface could suggest potential ways to complete the query.\n\n3. **Keyword Highlighting**: After a query, the system could output the results with the searched keywords highlighted. This would help users quickly ascertain the relevance of the shown engrams.\n\n4. **Advanced Filters**: There could be an option for advanced search where users can add certain filters to their query. This feature can filter questions based on various factors, like date created or modified, identifiers, associations, etc.\n\n5. **Ability to save queries**: Frequent or important queries could be saved by users to be accessed again with just a click. This would create a more engaging and fluid user experience.\n\n6. **Engram Context**: Next to the search results could be a feature that shows which neurons are related to the engram or how that engram is related to the kNeurons within a broader context.\n\nGiven that a PWA (Progressive Web App) can be built with HTML, CSS, and JavaScript, using a library like React or Vue.js as the frontend javascript framework can aid in creating the interactive UI components of the platform. For the styling part Bootstrap or Tailwind CSS can be considered due to their responsive and customizable nature.\n\nBackend can be powered by a Node server that handles user queries and retrieves the corresponding engram data from your database (MongoDB, PostgreSQL, etc). For speedy search results, particularly when dealing with a large volume of data, consider using a full-text search engine like Elasticsearch or integrating an AI-powered search service like Azure's Cognitive Search to perform more natural language based queries. \n\nAgain, this are just recommendations, the final decisions depends on a more comprehensive analysis of the project, goals and capabilities of the development team.","x":1600,"y":3377,"width":1020,"height":1165,"color":"6"},
		{"id":"Engrams/Data Cache/Khoj Overview.md","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/Khoj Overview.md","x":960,"y":1800,"width":500,"height":500},
		{"id":"e1fb6932970d47cd","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/khojConfigurePy.md","x":3560,"y":-918,"width":192,"height":244},
		{"id":"db4c645de2daf143","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/khojRoutersApiPy.md","x":3501,"y":-487,"width":217,"height":203},
		{"id":"60872544abf0a952","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/khojInterfaceWebIndexHTML.md","x":3424,"y":60,"width":294,"height":208},
		{"id":"Engrams/Data Cache/Overview of Progressive Web Apps.md","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/Overview of Progressive Web Apps.md","x":1000,"y":2400,"width":500,"height":500},
		{"id":"2c4ae729da3e883a","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/khojRoutersHelpersPy.md","x":3751,"y":-181,"width":279,"height":156},
		{"id":"57619d38ab4802ee","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/khojMainPy.md","x":3898,"y":-754,"width":512,"height":472},
		{"id":"217e0633636a9ef4","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/khojRoutersApiBetaPy.md","x":4570,"y":-725,"width":282,"height":168},
		{"id":"df19741cf5e07557","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/khojRoutersIndexerPy.md","x":4231,"y":-189,"width":198,"height":249},
		{"id":"d0c403bbace0b36e","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/khojRoutersWebClientPy.md","x":4629,"y":-415,"width":245,"height":223},
		{"id":"e52f113422d07006","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/khojInterfaceWebChatHTML.md","x":4047,"y":117,"width":193,"height":182},
		{"id":"d734d7431e23a024","type":"text","text":"suggest a design roadmap to inmplent onchain proof of knowledge through study question revenue through royalties for knowledge","x":4319,"y":1780,"width":250,"height":424},
		{"id":"705d92b18a3134df","type":"text","text":"change the css to represent the nerdbrain","x":4920,"y":1839,"width":294,"height":305},
		{"chat_role":"assistant","id":"06d5dd1860188694","type":"text","text":"The Khoj platform acts as a framework or template for AI agents by providing specific functionalities and architecture as follows:\n\n1. **User Interface**: The Khoj template includes an HTML layout with a textbox for input queries, dropdowns to select the type of query, and a results section to display the results. It also has event handlers to trigger search operations and adjust search parameters. \n\n2. **Event-Driven Programming**: Khoj uses JavaScript to listen for specific events, such as keyboard input or dropdown selection changes. Upon triggering these events, it executes corresponding functionality, such as incremental search or type field change.\n\n3. **API Integration**: Khoj uses the Fetch API to send GET requests to its backend executing the search based on the given parameters. It then receives a JSON response with the search results. \n\n4. **Response Rendering**: Once the JSON response is received, it's processed and rendered to HTML. The code includes separate rendering functions for different data formats such as org, markdown, pdf, html, and images. \n\n5. **Input Processing**: Khoj also has a function to process the input query and format it into a URL that includes parameters for the query, the number of results, and whether to rerank the results. \n\n6. **Configuration**: The platform fetches the enabled content types from the backend and dynamically populates the type dropdown accordingly. It can also prepopulate the query field based on URL parameters.\n\n7. **Effective Scoring**: It includes scoring methods such as image scoring, metadata scoring to rank the results and deliver the most relevant content to the users.\n   \nThese components together create a generalizable template for building AI agents using the Khoj platform. An AI agent developed using this framework could be easily integrated with various data sources and be adapted to handle different formats of data.","x":4047,"y":477,"width":782,"height":1059,"color":"6"},
		{"chat_role":"assistant","id":"32630e0b6cbebfd8","type":"text","text":"Designing elements related to the brain in CSS can involve various approaches, from explicitly creating a brain-like shape to more abstract representations. One example might be to create animations that suggest neural activity. Here's an example of a simple, somewhat abstract representation of a brain using CSS:\n\nHTML:\n```html\n<div class=\"brain\">\n  <div class=\"brain-lobes\"></div>\n</div>\n```\n\nCSS:\n```css\n.brain {\n  position: relative;\n  width: 100px;\n  height: 75px;\n  background: #9C27B0; /* Purple color for our brain */\n  border-radius: 50% 50% 50% 50%;\n}\n\n.brain:before {\n  content: \"\";\n  position: absolute;\n  top: 20px;\n  left: 15px;\n  width: 70px;\n  height: 50px;\n  background: #9C27B0; \n  border-radius: 50%;\n}\n\n.brain-lobes {\n  position: absolute;\n  width: 80px;\n  height: 67px;\n  top: 6px;\n  left: 10px;\n  background: #FF4081; /* Pink color for the lobes of our brain */\n  border-radius: 50% 50% 50% 50%;\n  background: #9C27B0;\n  box-shadow: inset 0 0 10px 6px #FF4081; /* Representing the lobes of the brain with inset shadow */\n}\n```\n\nThis code will generate a somewhat abstract, cartoonish brain. The `.brain` class generates the overall shape of the brain, and the `.brain-lobes` class in `::before` generates a sense of brain's gyri and sulci, the folds that visually define the brain.\n\nNote: as a text-based AI, I don't have the ability to generate and show images directly. Please copy and paste the above code into your HTML and CSS file respectively, and adjust the dimensions and colors as needed to suit your design.","x":5776,"y":268,"width":915,"height":611,"color":"6"},
		{"chat_role":"assistant","id":"dce1554bf29e9d18","type":"text","text":"1. Conceptualize: Understand the goal and decide what knowledge will earn royalties. Identify target users, whether they are students, researchers, educators, or others. \n\n2. Research: Understand the specifics of blockchain technology and how the royalty model can be implemented using \"smart contracts\". Research relevant laws and regulations in various jurisdictions concerning blockchain and revenue generation for non-tangible assets such as knowledge. \n\n3. Design the OnChain Proof-of-Knowledge Framework: This framework would consist of:\n\n   a. Defining Study Questions: Allow users to submit study questions they've answered or discussions they've contributed to on the platform. \n\n   b. Knowledge Verification: Determine methods for verifying the authenticity and value of the knowledge shared, perhaps through community votes or expert reviews.\n   \n   c. Proof-of-Knowledge Concept: Create an onchain implementation, which is a tamper-proof record of the knowledge shared.\n\n   d. Royalty Mechanism: Each time the question is accessed, a small fee could be incurred, with the resulting revenue being shared with the knowledge provider. \n\n4. Blockchain Platform Selection: Decide which blockchain technology to use. Options may include Ethereum (which has powerful and well-tested support for smart contracts), Binance Smart Chain, Tezos, or Flow.\n\n5. Develop a Prototype: Create a prototype of the system, with preliminary versions of key features like question submission, adoption, and revenue generation. \n\n6. Test the Prototype: Conduct rigorous testing focusing on system functionality, security, and scalability. Use the feedback to make necessary improvements.\n\n7. Launch a Beta Version: Release an early version of the system to a limited number of users (ideally those who are more technologically adept and tolerant of potential bugs in a new system).\n\n8. Refine Based on User Feedback: Collect feedback from beta users and refine the system. This might involve changing the user interface, the mechanisms for submitting and verifying knowledge, the structure of the royalties, or other components.\n\n9. Full Rollout: Once refinements have been made based on beta testing, roll out full version to all users. \n\n10. Regular Updates and Maintenance: Commit to maintaining the system with regular updates, handling bug fixes and security updates, and potentially adding new features or expanding to new platforms.\n\n11. Measure Success: Use KPIs to measure the implementation success, this could include the amount of knowledge shared, amount of royalties earned, and user engagement.\n\nPlease note that implementing such a system involves a deep understanding of blockchain and financial regulatory complexities across various jurisdictions. It is recommended to hire professionals who have experience in these areas, and also consult legal professionals for advice.","x":4260,"y":2520,"width":1071,"height":1316,"color":"6"},
		{"chat_role":"assistant","id":"0992f2086ebe0989","type":"text","text":"While I don't have access to specific design or branding elements for NerdBrain, here is a general idea of how you could adjust CSS styling to give your website a \"nerdy\" yet professional aesthetic. I'll utilize a monospace font, vivid colors mimicking code editors, and a clean design.\n\nPlease adjust the colors and other elements according to your brand's guidelines:\n\n```css\nbody {\n    padding: 0px;\n    margin: 0px;\n    background: #282A36; /* Dark Grey Background */\n    color: #50FA7B; /* Vivid Green Font */\n    font-family: 'Courier New', monospace; /* Monospace font for that 'code' vibe */\n    font-size: 20px;\n    font-weight: 300;\n    line-height: 1.5em;\n}\n#options {\n    padding: 0;\n    display: grid;\n    grid-template-columns: 1fr;\n}\n#options > * {\n    padding: 15px;\n    border-radius: 5px;\n    border: 1px solid #50FA7B; /* Vivid Green Border */\n    background: #44475A /* Darker Grey Background*/\n}\n.option:hover {\n    box-shadow: 0 0 11px #BD93F9; /* Purple shadow  */\n}\n#query {\n    font-size: larger;\n    color: #BD93F9; /* Purple Text */\n}\n#results {\n    font-size: medium;\n    color: #F1FA8C /* Light Yellow Text */\n    margin: 0px;\n    line-height: 20px;\n}\na {\n    color: #F1FA8C;  /* Light Yellow Link Text */\n    text-decoration: none;\n}\n```\n\nRemember, every brand will have its unique style and aesthetic. Try to match colors, fonts, and additional elements to your brand's guidelines. This is a merely a simple possibility, but you have infinite ways to represent NerdBrain's values and aesthetics on your site.","x":5480,"y":1992,"width":1440,"height":1488,"color":"6"},
		{"id":"835b2fd9424db66b","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/khojInterfaceWebAssetsCSS.md","x":5480,"y":1438,"width":296,"height":175},
		{"id":"845cda2a2ab8d8d0","type":"text","text":"create the design elements for the brain ","x":6085,"y":1635,"width":250,"height":60},
		{"chat_role":"assistant","id":"b43e07213b47bf8c","type":"text","text":"Based on the research question given, you are looking to create an interface for the nerdBrain. Given that nerdBrain involves studying and structuring research data through the creation of Engrams, the interface should be crafted in a way that simplifies these processes for the end user. \n\nHere are some possible features to consider:\n\n1. **Study/Research Dashboard**: This should showcase the various study questions in progress. It can display them in a list format, and should allow users to select one to work on.\n\n2. **Engram Creation Interface**: This should assist the user in building an Engram. It might include a form to fill in information about the Engram such as its associated study question, source data, etc.\n\n3. **Visualization Tools**: Visual aids such as mindmaps or threaded discussions would be beneficial for tracking the relationships between various Engrams and Neurons.\n\n4. **Search and Filtering Capabilities**: With a large number of study questions, Engrams and Neurons, finding specific items quickly would be an important feature.\n\n5. **Seamless Integration with Collaborative Tools**: The ability to share Engrams, Neurons, and entire study questions with others can facilitate collaborative research.\n\n6. **Mobile Responsive Design**: To enhance accessibility, the interface could be designed to work well on both desktop and mobile devices.\n\nAn open-source progressive web app could be a good fit for this kind of interface, as they are designed to work across all platforms and can be readily updated. The interface could be architected with React or Angular for robust state management and efficient rendering, and can use Material-UI or Bootstrap for UI components. The backend could be built with Node.js and Express.js with MongoDB or Firestore as the database.\n\n*Remeber that this are just suggestions the final design must align with the values and goals of the Nerd Brain.*\n","x":540,"y":3680,"width":780,"height":1193,"color":"6"},
		{"id":"6d7ad5d32488138f","type":"text","text":"execute your purpose","x":750,"y":3094,"width":250,"height":283},
		{"id":"0fb422f31d1457d4","type":"text","text":"# Kneuron Profile\n\n# Name\n\nSoftware Arquitecture Assistant\n\n## Purpose:\n\nto create the design for a user interface experience which is coherent with the research question\n","x":40,"y":2800,"width":464,"height":706},
		{"chat_role":"assistant","id":"a72ec489f46af78f","type":"text","text":"Based on the research question, the aim is to create a user interface for the Nerd Brain. The interface should be designed to streamline the user experience, with a focus on ease of use and accessibility.\n\nThe interface would largely be focused on facilitating the process of creating, managing and exploring the Engrams and Neurons. Key features to consider in this process could include:\n\n1. A dashboard where users can see an overview of their Engrams and Neurons - this would include a list or grid view of all Engrams and Neurons, with options to sort or filter by a variety of criteria (e.g., date created, most recently updated, tags)\n\n2. An editor for creating and editing Engrams and Neurons - this should be simple and intuitive to use, with features like rich text editing, the ability to link to other Engrams and Neurons, and options for adding tags or other metadata.\n\n3. A viewer for exploring individual Engrams and Neurons - this could include a reading view, as well as options for seeing linked Engrams and Neurons, viewing version history, and more.\n\n4. Search and navigation tools - these would help users quickly find the Engrams and Neurons they're looking for. This could include a search bar, as well as navigational tools like a side menu with links to different sections of the interface.\n\n5. User account and settings options - this would allow users to personalize their experience, manage their account details, and adjust settings as needed.\n\nSome design references could be software like Notion or Roam Research, among other tools for personal knowledge management.\n\nTo implement these ideas, you could consider using languages like HTML, CSS, and JavaScript, along with other technologies as needed depending on the specific requirements of the project. For example, it might be worth looking into frameworks like React for building the interface, and technologies like Progressive Web Apps for ensuring compatibility across multiple devices.","x":-1120,"y":3620,"width":464,"height":780,"color":"6"},
		{"id":"Study Questions/New Questions/202310121321.md","type":"file","file":"Proofs of Knowledge/Study Questions/New Questions/202310121321.md","x":-1336,"y":1420,"width":680,"height":1390,"color":"1"},
		{"chat_role":"assistant","id":"fbfcd34cd1a8c08e","type":"text","text":"The Khoj platform for Nerdbrai appears to be designed as a responsive and interactive web application that takes a user's query and returns relevant data. The architecture can be dissected into three main areas: the HTML structure, CSS Styling, and JavaScript Functionality.\n\n1. HTML Structure: The HTML structure provides the required layout for the web application. It consists of sections for the header, query input fields, options for the query (like dropdown for type selection), and a display area for results.\n\n2. CSS Styling: There's a substantial amount of CSS used for styling the layout, creating a modern and attractive user interface. Responsive design is maintained through the use of media queries to handle different screen sizes. Key UI elements include a search bar, type dropdown selection, and a dynamic results display section.\n\n3. JavaScript Functionality: This is where the actual functionality of the search tool is implemented. The script takes the user's query and sends an API request to the Khoj backend. There are different rendering functions set up for different types of data - org, pdf, github, etc. The received data is then processed, rendered on the page in an appropriate format, and displayed in the result section.\n\nA key feature is that it uses incremental search (search as you type) for better user experience and it even gives the user ability to select the type of search they want.\n\nNotes:\n- The platform makes use of local storage for certain settings such as the count of Khoj results.\n- Certain elements of the app are dynamically populated to reflect user's configurations.\n- The site also has an introductory banner for new users to sign up and a nav pane for moving between different sections like Chat, Search, and Settings.\n  \nIn summary, Khoj's web application architecture combines HTML, CSS, and JavaScript to create a responsive user-friendly interface and interactive functionality for the user's search needs.","x":2217,"y":1361,"width":807,"height":1260,"color":"6"},
		{"id":"Engrams/Data Cache/Neurons.md","type":"file","file":"Proofs of Knowledge/Engrams/Data Cache/Neurons.md","x":960,"y":1188,"width":500,"height":500}
	],
	"edges":[
		{"id":"Study Questions/New Questions/202310121321.md-Study Questions/Study Questions.md","fromNode":"Study Questions/New Questions/202310121321.md","fromSide":"right","toNode":"Study Questions/Study Questions.md","toSide":"left","fromEnd":"arrow"},
		{"id":"Study Questions/New Questions/202310121321.md-Engrams/Engrams.md","fromNode":"Study Questions/New Questions/202310121321.md","fromSide":"right","toNode":"Engrams/Engrams.md","toSide":"left","fromEnd":"arrow"},
		{"id":"Study Questions/New Questions/202310121321.md-Engrams/Data Cache/Neurons.md","fromNode":"Study Questions/New Questions/202310121321.md","fromSide":"right","toNode":"Engrams/Data Cache/Neurons.md","toSide":"left","fromEnd":"arrow"},
		{"id":"Engrams/Data Cache/Khoj Overview.md-Engrams/Data Cache/Khoj Overview.md","fromNode":"Engrams/Data Cache/Khoj Overview.md","fromSide":"right","toNode":"Engrams/Data Cache/Khoj Overview.md","toSide":"left"},
		{"id":"Engrams/Data Cache/Overview of Progressive Web Apps.md-Engrams/Data Cache/Overview of Progressive Web Apps.md","fromNode":"Engrams/Data Cache/Overview of Progressive Web Apps.md","fromSide":"right","toNode":"Engrams/Data Cache/Overview of Progressive Web Apps.md","toSide":"left"},
		{"id":"ef598afabe26e1a4","fromNode":"Study Questions/New Questions/202310121321.md","fromSide":"bottom","toNode":"0fb422f31d1457d4","toSide":"top"},
		{"id":"225ca9a0fe7d91a8","fromNode":"0fb422f31d1457d4","fromSide":"right","toNode":"6d7ad5d32488138f","toSide":"left"},
		{"id":"0255cd4cb8a44fff","fromNode":"Engrams/Data Cache/Overview of Progressive Web Apps.md","fromSide":"left","toNode":"0fb422f31d1457d4","toSide":"top"},
		{"id":"d22c3a6ba195e898","fromNode":"Engrams/Data Cache/Khoj Overview.md","fromSide":"left","toNode":"0fb422f31d1457d4","toSide":"top"},
		{"id":"5818d755795c5ede","fromNode":"0fb422f31d1457d4","fromSide":"bottom","toNode":"a72ec489f46af78f","toSide":"top"},
		{"id":"9c337d6bb68893fd","fromNode":"6d7ad5d32488138f","fromSide":"bottom","toNode":"b43e07213b47bf8c","toSide":"top"},
		{"id":"6616ecd0c8c3555f","fromNode":"b43e07213b47bf8c","fromSide":"right","toNode":"d34277d0e31d4c3a","toSide":"left"},
		{"id":"5689a3648b6158bf","fromNode":"d34277d0e31d4c3a","fromSide":"bottom","toNode":"6558330b3ab34086","toSide":"top"},
		{"id":"1cb1c95383591a20","fromNode":"57619d38ab4802ee","fromSide":"bottom","toNode":"60872544abf0a952","toSide":"top"},
		{"id":"a7f1c4e68d72562b","fromNode":"e52f113422d07006","fromSide":"left","toNode":"60872544abf0a952","toSide":"right"},
		{"id":"fb58552db59102b5","fromNode":"2c4ae729da3e883a","fromSide":"top","toNode":"57619d38ab4802ee","toSide":"bottom"},
		{"id":"ae3d08c0712a337c","fromNode":"df19741cf5e07557","fromSide":"top","toNode":"57619d38ab4802ee","toSide":"bottom"},
		{"id":"58aaa4f0132aeb75","fromNode":"d0c403bbace0b36e","fromSide":"top","toNode":"57619d38ab4802ee","toSide":"right"},
		{"id":"1913fa6db4d39892","fromNode":"217e0633636a9ef4","fromSide":"left","toNode":"57619d38ab4802ee","toSide":"right"},
		{"id":"8b0d5f840495e90c","fromNode":"e1fb6932970d47cd","fromSide":"right","toNode":"57619d38ab4802ee","toSide":"top"},
		{"id":"b2eb43a3f8440e64","fromNode":"db4c645de2daf143","fromSide":"right","toNode":"57619d38ab4802ee","toSide":"left"},
		{"id":"c4e4db0a7dfca974","fromNode":"60872544abf0a952","fromSide":"left","toNode":"4c368eb418ef47f8","toSide":"top"},
		{"id":"5aee06fd8299d1aa","fromNode":"6558330b3ab34086","fromSide":"top","toNode":"4c368eb418ef47f8","toSide":"top"},
		{"id":"7c86d2b7424cbd63","fromNode":"4c368eb418ef47f8","fromSide":"bottom","toNode":"fbfcd34cd1a8c08e","toSide":"top"},
		{"id":"156962afcae2f3cf","fromNode":"60872544abf0a952","fromSide":"bottom","toNode":"c8357a9326af2f57","toSide":"top"},
		{"id":"5e9a941c33e767fb","fromNode":"c8357a9326af2f57","fromSide":"bottom","toNode":"06d5dd1860188694","toSide":"top"},
		{"id":"93d706e62a55c993","fromNode":"4c368eb418ef47f8","fromSide":"bottom","toNode":"4e26285d76eb758e","toSide":"top"},
		{"id":"6d3ffe6d038e0bef","fromNode":"4e26285d76eb758e","fromSide":"right","toNode":"d734d7431e23a024","toSide":"left"},
		{"id":"8a80c93bedadda4d","fromNode":"d734d7431e23a024","fromSide":"bottom","toNode":"dce1554bf29e9d18","toSide":"top"},
		{"id":"823a062bfa225629","fromNode":"dce1554bf29e9d18","fromSide":"right","toNode":"705d92b18a3134df","toSide":"left"},
		{"id":"e33763bf95f09fa7","fromNode":"835b2fd9424db66b","fromSide":"bottom","toNode":"705d92b18a3134df","toSide":"top"},
		{"id":"a22322414bedf5e5","fromNode":"705d92b18a3134df","fromSide":"bottom","toNode":"0992f2086ebe0989","toSide":"top"},
		{"id":"90e2128373aa8eb3","fromNode":"0992f2086ebe0989","fromSide":"top","toNode":"845cda2a2ab8d8d0","toSide":"bottom"},
		{"id":"2a63d71dd1163685","fromNode":"845cda2a2ab8d8d0","fromSide":"bottom","toNode":"32630e0b6cbebfd8","toSide":"top"}
	]
}